<!DOCTYPE html>
<html>
	<head>
		<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1" />
		<title>Sitcoms | Diana's Lab</title>
<style>
body {
	background-color: #1d2021;
	color: #fbf1c7;
}
#timeline {
	width: 100%;
	overflow-x: scroll;
}
#timeline > div {
	text-align: center;
	justify-content: center;
	margin-inline: auto;
	display: grid;
	width: @out(sitcoms.size() * 5 + 4);@rem;
	grid-template-columns: 4rem repeat(@out(sitcoms.size());@, 5rem);
}
header, p, section {
	max-width: 90ch;
	margin-inline: auto
}
a, a:visited, a:link, a:hover {
	color: #f6e5f6;
}
</style>
	</head>
	<body>
		<header>
			<p><a href="/">back to bendun.cc</a></p>
			<h1>Sitcoms</h1>
			<p>In 2023 I fell in love with Community.
			Curious what other sitcoms have to offer (and inspired by Abed cultural references) I decided to catch up.
			This is a celebration of that project.</p>

			<blockquote>
				<p>There is skill to it. More importantly, it has to be joyful, effortless, fun. TV defeats its own purpose when it’s pushing an agenda, or trying to defeat other TV or being proud or ashamed of itself for existing. It’s TV; it’s comfort. It’s a friend you’ve known so well, and for so long you just let it be with you, and it needs to be okay for it to have a bad day or phone in a day, and it needs to be okay for it to get on a boat with Levar Burton and never come back. Because eventually, it all will.</p>
				<cite>&ndash; Abed Nadir in the finale of Community s06e13 "Emotional Consequences of Broadcast Television"</cite>
			</blockquote>
		</header>

		<section id="timeline" style="max-width: none">
			<div>
				<div style="grid-column: 1/@out(sitcoms.size() + 2);@; grid-row: 9/19; background-color: #282828"></div>
				<div style="grid-column: 1/@out(sitcoms.size() + 2);@; grid-row: 29/@out(years_count+4);@; background-color: #282828"></div>

				@for (auto [n, x] : std::views::enumerate(inclusive_range{year_start, year_end})) {@
					<div style="position: sticky; background-color: #0003; left: 0; grid-column: 1; grid-row: @out(n+3);@">@out(x);@</div>
				@}@
				<div style="border-right: 1px dotted; grid-row: 1/@out(years_count+4);@; grid-column: @out(sitcoms.size()+1);@"></div>
				@for (auto const&[n1, s] : std::views::enumerate(sitcoms)) {@
					@auto n = n1 + 2;@
					<div style="border-left: 1px dotted; grid-row: 1/@out(years_count+4);@; grid-column: @out(n);@"></div>
					<div style="grid-column: @out(n);@; grid-row: 2;">@for (auto i = 0u; i < s->score; ++i) { out("⭐"); } if (s->score == 0) out("🚮");@</div>
					<!-- TODO: Title font size should be calculated from the longest word in the title -->
					<div style="font-size: 0.8rem; grid-row: 1; grid-column: @out(n);@">@out(s->title);@</div>
					@auto [from, to] = std::ranges::minmax(std::views::join(s->seasons));@
					@std::string_view const colors[] = { "#b8bb26", "#fabd2f", "#83a598", "#d3869b", "#8ec07c", "#928374", "#fe8019" };@

					<!-- TODO: Use more granular seasons data -->
					@for (auto x = from; x <= to; ++x) {@
						@auto diff = (x - year_start).count();@
						<div style="grid-column: @out(n);@; grid-row: @out(diff + 3);@; background-color: @out(colors[(n-1) % std::size(colors)]);@"></div>
					@}@

					<div style="font-size: 0.8rem; grid-column: @out(n);@; grid-row: @out(years_count+4);@; border-bottom: 1px solid">@out(std::format("{} {}", s->seasons.size(), s->seasons.size() == 1 ? "season" : "seasons"));@</div>
				<div style="font-size: 0.8rem; grid-column: @out(n);@; grid-row: @out(years_count+5);@">@out(pretty_print_watched(*s));@</div>
				@}@
			</div>
		</section>
		<p>
		@for (auto [k, v] : seasons_watched_in_year) if (k >= std::chrono::year(2023)) {@
			In @out(k);@ I have watched @out(v);@ seasons across @out(sitcoms_watched_in_year[k]);@ shows.
		@}@
		</p>

		<p>If you would like to watch most of them at the same time you should do it in @out(years_with_most_sitcoms);@ (@out(year_with_most_sitcoms->second);@ sitcoms have aired their seasons).</p>


		<p>@out(shows_with_musical_episodes.size());@ sitcoms had musical episodes: @out(shows_with_musical_episodes_list);@.</p>

		<section>
			<h2>Networks</h2>

			<table>
				<tbody>
					@for (auto const& [network, shows] : networks) {@
					<tr>
						<th>
							@out(network);@<br>
							<span style="font-style: italic">(@out(shows.size());@)</span>
						</th>
						<td>
							<ul>
								@for (auto const& show : shows) {@
									<li>@out(show);@</li>
								@}@
							</ul>
						</td>
					</tr>
					@}@
				</tbody>
			</table>
		</section>

	</body>
</html>
